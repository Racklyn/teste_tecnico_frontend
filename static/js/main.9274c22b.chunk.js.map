{"version":3,"sources":["assets/imgs/logo.png","components/Header.tsx","services/api.ts","pages/Continentes.tsx","pages/Idiomas.tsx","pages/PaisesPop.tsx","routes.tsx","App.tsx","index.tsx"],"names":["Header","selected","className","size","src","Logo","alt","to","api","axios","create","baseURL","Continentes","useState","chartData","setChartData","africa","americas","asia","europe","oceania","setSelected","selectAllChecked","setSelectAllChecked","showPopulations","setShowPopulations","textShowOption","showPop","chart","popData","Object","keys","forEach","key","length","cont","get","then","resp","total","data","reduce","country","population","labels","datasets","values","backgroundColor","useEffect","every","e","onClick","Checkbox","color","checked","onChange","value","target","map","toUpperCase","redraw","height","width","options","maintainAspectRatio","responsive","scales","yAxes","ticks","beginAtZero","legend","display","defaults","global","position","Idiomas","othersLanguages","setOthersLanguages","languages","lang","pos","l","langName","indexOf","name","qtd","push","languagesCopy","slice","sort","a","b","fontSize","boxWidth","padding","PaisesPop","countries","setCountries","drawCountries","randomCountries","min","max","all","i","random","reps","Math","floor","preview","c","includes","label","flag","CircularProgress","Routes","path","exact","component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9274c22b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.eede5658.png\";","import React from 'react';\r\nimport '../styles/header.css';\r\nimport {Link} from 'react-router-dom'\r\nimport Logo from '../assets/imgs/logo.png'\r\nimport {GoGlobe} from 'react-icons/go'\r\n\r\n\r\nfunction Header({selected=1}) {\r\n\r\n    return (\r\n        <header>\r\n            <div className=\"header-title\">\r\n                <h1> <GoGlobe size={36}/> Countries</h1>\r\n                <div className=\"logo\">\r\n                    <img src={Logo} alt=\"Mediar\"/>\r\n                </div>\r\n            </div>\r\n            <div className=\"header-menu\">\r\n                <Link to=\"/\" className={selected===1?\"selected-option\":\"\"}>CONTINENTES</Link>\r\n                <Link to=\"/paisesPop\" className={selected===2?\"selected-option\":\"\"}>PAÍSES</Link>\r\n                <Link to=\"/idiomas\" className={selected===3?\"selected-option\":\"\"}>IDIOMAS</Link>\r\n            </div>\r\n        </header>\r\n     );\r\n}\r\n\r\nexport default Header;\r\n","import axios from 'axios'\r\n\r\nconst api = axios.create({\r\n    baseURL: 'https://restcountries.eu/rest/v2'\r\n})\r\n\r\nexport default api","import React, { useEffect, useState } from 'react';\r\nimport '../styles/continentes.css'\r\nimport {Bar} from 'react-chartjs-2'\r\nimport Header from '../components/Header';\r\nimport api from '../services/api';\r\nimport { Checkbox } from '@material-ui/core';\r\n\r\ninterface countryInterface{\r\n    population:number\r\n}\r\ninterface selectedInterface{\r\n    [key: string]: boolean \r\n}\r\ninterface popDataInterface{\r\n    [key: string]: number \r\n}\r\n\r\n\r\nfunction Continentes() {\r\n\r\n    const [chartData, setChartData] = useState({})\r\n\r\n    const [selected, setSelected] = useState<selectedInterface>({\r\n        africa:true,\r\n        americas:true,\r\n        asia:true,\r\n        europe:true,\r\n        oceania:true,\r\n    })\r\n    const [selectAllChecked, setSelectAllChecked] = useState(true)\r\n\r\n    const [showPopulations, setShowPopulations] = useState(true)\r\n\r\n    const textShowOption = (showPop:boolean) =>{\r\n        return showPop?\"população\":\"número de países\"\r\n    }\r\n\r\n\r\n    useEffect(()=>{\r\n        chart()\r\n    },[showPopulations])\r\n\r\n    useEffect(()=>{\r\n        //verificando se todos estão selecionados\r\n        setSelectAllChecked(Object.values(selected).every(e=>e))\r\n        chart()\r\n    },[selected])\r\n\r\n\r\n    function chart(){\r\n        let popData: popDataInterface ={}\r\n\r\n        //  Adicionando continentes selecionados\r\n        Object.keys(selected).forEach(key=>{\r\n            if(selected[key]) popData[key]=0\r\n        })\r\n        \r\n        //  Caso nenhum continente tenha sido selecionado\r\n        if(Object.keys(popData).length===0){\r\n            setChartData({})\r\n        }else{\r\n            //  Somas das populações em cada continente\r\n            Object.keys(popData).forEach(cont=>{\r\n            api.get(`region/${cont}/?fields=name;population`).then(resp=>{\r\n                let total=0\r\n                if(showPopulations){\r\n                    total = resp.data.reduce((total:number, country:countryInterface)=>{\r\n                        return total+country.population\r\n                    },0)\r\n                }else{\r\n                    total = resp.data.length\r\n                }\r\n                \r\n                popData[cont] = total\r\n                 \r\n                //  Atualizando dados do gráfico:\r\n                setChartData({\r\n                    labels:Object.keys(popData),\r\n                    datasets:[\r\n                        {\r\n                        data: Object.values(popData),              \r\n                        backgroundColor: ['#b00000','#ff0000','#FF5043','#ff6067','#ff9b8e'],\r\n                        }\r\n                    ]\r\n                })\r\n            })\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    function selectAll(value:boolean){\r\n        setSelectAllChecked(value)\r\n        setSelected(\r\n            {\r\n                africa:value,\r\n                americas:value,\r\n                asia:value,\r\n                europe:value,\r\n                oceania:value,\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n    <div className=\"Page-container\">\r\n        <Header selected={1}/>\r\n        <main>\r\n            <div className=\"message\">\r\n                <p>\r\n                    O gráfico de barras a seguir apresenta os continentes por \r\n                    <strong> {textShowOption(showPopulations)}</strong>.\r\n                </p>\r\n                <p>\r\n                    <span\r\n                        className=\"click-span\"\r\n                        onClick={()=>setShowPopulations(!showPopulations)}\r\n                    >\r\n                        Clique aqui\r\n                    </span> para mostrar por {textShowOption(!showPopulations)}\r\n                </p>\r\n            </div>\r\n            <div className=\"main-content\">\r\n                <div className=\"config-menu\">\r\n                    <h2>Mostrar:</h2>\r\n                    <div className=\"options\">\r\n                        <div className=\"select-continent\">\r\n                            <Checkbox\r\n                                    color='default'\r\n                                    className=\"checkbox\"\r\n                                    checked={selectAllChecked}\r\n                                    onChange={e=>selectAll(e.target.checked)}\r\n                                />\r\n                            <label>ALL</label>\r\n                        </div>\r\n                        {Object.keys(selected).map(cont=>{\r\n                            return(\r\n                                <div key={`${cont}-select`} className=\"select-continent\">\r\n                                    <Checkbox\r\n                                        color='default'\r\n                                        className=\"checkbox\"\r\n                                        checked={selected[cont]}\r\n                                        onChange={e=>setSelected({...selected,[cont]:e.target.checked})}\r\n                                    />\r\n                                    <label>{cont.toUpperCase()}</label>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                        \r\n                    </div>\r\n                    \r\n                </div>\r\n                <div className=\"chart-container\">\r\n                    <Bar\r\n                        redraw\r\n                        data={chartData}\r\n                        height={400}\r\n                        width={400}\r\n                        options={{\r\n                            maintainAspectRatio: false,\r\n                            responsive: true,\r\n                            scales: {\r\n                                yAxes: [\r\n                                    { \r\n                                        ticks: { beginAtZero: true } \r\n                                    }\r\n                                ]\r\n                            },\r\n                            legend: {\r\n                                display: false,\r\n                            }\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </main>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Continentes;\r\n","import React, { useEffect, useState } from 'react';\r\nimport '../styles/idiomas.css'\r\nimport {defaults, Doughnut} from 'react-chartjs-2'\r\nimport Header from '../components/Header';\r\nimport api from '../services/api';\r\nimport {Checkbox} from '@material-ui/core'\r\n\r\ndefaults.global.legend.position = 'right'\r\n\r\ninterface countryInterface{\r\n    population:number,\r\n    languages:{name:string}[]\r\n}\r\ninterface selectedInterface{\r\n    [key: string]: boolean\r\n}\r\ninterface languagesInterface{\r\n    langName:string,\r\n    qtd:number\r\n}\r\n\r\n\r\nfunction Idiomas() {\r\n\r\n    const [chartData, setChartData] = useState({})\r\n\r\n    const [selected, setSelected] = useState<selectedInterface>({\r\n        africa:true,\r\n        americas:true,\r\n        asia:true,\r\n        europe:true,\r\n        oceania:true,\r\n    })\r\n    const [selectAllChecked, setSelectAllChecked] = useState(true)\r\n\r\n\r\n    const [othersLanguages, setOthersLanguages] = useState(0)\r\n\r\n    useEffect(()=>{\r\n        //verificando se todos estão selecionados\r\n        setSelectAllChecked(Object.values(selected).every(e=>e))\r\n        chart()\r\n    },[selected])\r\n\r\n    function chart(){\r\n        let languages:languagesInterface[] =[]\r\n\r\n        setChartData({})\r\n        setOthersLanguages(0)\r\n\r\n        Object.keys(selected).forEach(cont=>{\r\n            if(selected[cont]){\r\n                api.get(`region/${cont}`).then(resp=>{\r\n                    resp.data.forEach((country:countryInterface)=>{\r\n                        country.languages.forEach(lang=>{\r\n\r\n                            //  Pegando index de lang na array. Caso não exista retorna -1\r\n                            let pos = languages.map(l=>l.langName).indexOf(lang.name)\r\n\r\n                            if(pos>=0){ //Se lang já foi adicionado\r\n                                languages[pos].qtd++\r\n                            }else{ //Caso lang não exista ainda na array\r\n                                languages.push({\r\n                                    langName: lang.name,\r\n                                    qtd: 1\r\n                                })\r\n                            }\r\n                        })\r\n                    })\r\n\r\n                    //  Copiando languages\r\n                    let languagesCopy = languages.slice(0)\r\n\r\n                    //  Ordenando (decrescente) languages por quantidade\r\n                    languagesCopy.sort((a,b) => (a.qtd > b.qtd) ? -1 : ((b.qtd > a.qtd) ? 1 : 0))\r\n\r\n                    //  filtrando os 10 idiomas que mais aparecem\r\n\r\n                    setOthersLanguages(languagesCopy.slice(10,languagesCopy.length-1).length)\r\n\r\n                    languagesCopy = languagesCopy.slice(0,10)\r\n\r\n                    //  Atualizando dados do gráfico:\r\n                    setChartData({\r\n                        labels:languagesCopy.map(l=>l.langName),\r\n                        datasets:[\r\n                            {\r\n                            data: languagesCopy.map(l=>l.qtd),\r\n                            backgroundColor: ['#830000','#b00000','#ff0000','#ff301c','#FF5043',\r\n                                            '#ff6067','#ff9b8e','#ff9eae','#ffcebe','#ff9dee'],\r\n                            }\r\n                        ]\r\n                        }\r\n                    )\r\n\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    function selectAll(value:boolean){\r\n        setSelectAllChecked(value)\r\n        setSelected(\r\n            {\r\n                africa:value,\r\n                americas:value,\r\n                asia:value,\r\n                europe:value,\r\n                oceania:value,\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n    <div className=\"Page-container\">\r\n        <Header selected={3}/>\r\n        <main>\r\n            <div className=\"message\">\r\n                <p>\r\n                    O gráfico circular a seguir apresenta a quantidade de países que falam determinado\r\n                    idioma nos continentes que estão sendo considerados.\r\n                </p>\r\n                <p>O gráfico apresenta apenas os 10 idiomas mais falados nos continentes em questão.</p>\r\n            </div>\r\n            <div className=\"main-content\">\r\n                <div className=\"config-menu\">\r\n                    <h2>Considerando os continentes:</h2>\r\n                    <div className=\"options\">\r\n                        <div className=\"select-continent\">\r\n                            <Checkbox\r\n                                color='default'\r\n                                className=\"checkbox\"\r\n                                checked={selectAllChecked}\r\n                                onChange={e=>selectAll(e.target.checked)}\r\n                            />\r\n                            <label>ALL</label>\r\n                        </div>\r\n                        {Object.keys(selected).map(cont=>{\r\n                            return(\r\n                                <div key={`${cont}-select`} className=\"select-continent\">\r\n                                    <Checkbox\r\n                                        color='default'\r\n                                        className=\"checkbox\"\r\n                                        checked={selected[cont]}\r\n                                        onChange={e=>setSelected({...selected,[cont]:e.target.checked})}\r\n                                    />\r\n                                    <label>{cont.toUpperCase()}</label>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"chart-container\">\r\n                    <Doughnut\r\n                        data={chartData}\r\n                        height={400}\r\n                        width={400}\r\n                        options={{\r\n                            maintainAspectRatio: false,\r\n                            responsive: true,\r\n                            legend: {\r\n                                display: true,\r\n                                labels: {\r\n                                    fontSize: 20,\r\n                                    boxWidth: 40,\r\n                                    padding: 10,\r\n                                }\r\n                            }\r\n                        }}\r\n                    />\r\n                    {othersLanguages>0\r\n                    &&(\r\n                        <p className=\"others-languages\">+ {othersLanguages} idiomas</p>\r\n                    )\r\n                    }\r\n                </div>\r\n            </div>\r\n        </main>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Idiomas;\r\n","import React, { useEffect, useState } from 'react';\r\nimport '../styles/paisesPop.css'\r\nimport {Bar} from 'react-chartjs-2'\r\nimport Header from '../components/Header';\r\nimport api from '../services/api';\r\nimport {GiRollingDices} from 'react-icons/gi'\r\nimport {CircularProgress} from '@material-ui/core'\r\n\r\ninterface countryInterface{\r\n    name:string;\r\n    population:number,\r\n    flag:string\r\n}\r\n\r\nfunction PaisesPop() {\r\n\r\n    const [chartData, setChartData] = useState({})\r\n    const [countries, setCountries] = useState<countryInterface[]>([])\r\n\r\n    useEffect(()=>{\r\n        drawCountries()\r\n    },[])\r\n\r\n    // Sortear países e mostrá-los no gráfico\r\n    function drawCountries(){\r\n        let randomCountries: countryInterface[]= []\r\n        let min=0\r\n        let max=0\r\n        setCountries([])\r\n        api.get('all?fields=name;population;flag').then(resp=>{\r\n            let all = resp.data\r\n            for(var i=0;i<8;i++){\r\n                let random: countryInterface\r\n                let reps = 0\r\n                do{\r\n                    reps++\r\n                    random = all[Math.floor(Math.random()*all.length)]\r\n                    //  Pegando menor e maior população da lista\r\n                    let preview = [...randomCountries.map(c=>c.population),random.population]\r\n                    min = Math.min(...preview)\r\n                    max = Math.max(...preview)\r\n                }while(\r\n                    (randomCountries.includes(random) ||\r\n                    //  não pegar países com populações muito distintas\r\n                    max > 25*min) &&\r\n                    reps<all.length\r\n                )\r\n                //evitando um loop infinito, recomeçando o sorteio aleatório\r\n                if(reps>=all.length){\r\n                    drawCountries()\r\n                    break;\r\n                }else{ //caso tudo tenha corrido bem\r\n                    randomCountries.push(random)\r\n                }\r\n            }\r\n            setCountries(randomCountries)\r\n\r\n            //  Atualizando dados do gráfico:\r\n            setChartData({\r\n                labels:randomCountries.map(c=>c.name.slice(0,13)),\r\n                datasets:[\r\n                    {\r\n                    label: \"população do país\",\r\n                    data: randomCountries.map(c=>c.population),\r\n                    backgroundColor: ['#830000','#b00000','#ff0000','#ff301c',\r\n                                    '#FF5043','#ff6067','#ff9b8e','#ff9eae'],\r\n                    }\r\n                ]\r\n            })\r\n        })\r\n    }\r\n\r\n    return (\r\n    <div className=\"Page-container\">\r\n        <Header selected={2}/>\r\n        <main>\r\n            <div className=\"message\">\r\n                <p>\r\n                    O gráfico de barras a seguir apresenta a comparação entre as populações de alguns países\r\n                    escolhidos de forma aleatória.\r\n                </p>\r\n            </div>\r\n            <div className=\"main-content\">\r\n                <div className=\"config-menu\">\r\n                    <h2>Países:</h2>\r\n                    {countries.length>0?\r\n                        <div className=\"countries-container\">\r\n                            {countries.map(country=>{\r\n                                return(\r\n                                    <span key={`${country.name}-icon`} className=\"country\">\r\n                                        <img src={country.flag} alt=\"flag\"/>\r\n                                        <p>{country.name}</p>\r\n                                    </span>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                        :\r\n                        (<div className=\"progress-container\">\r\n                            <CircularProgress className=\"progress\" color='inherit'/>\r\n                        </div>\r\n                        )\r\n                    }\r\n                    \r\n                    <button className=\"random-button\" onClick={()=>drawCountries()}>\r\n                        <GiRollingDices size={28} /> Sortear\r\n                    </button>\r\n                    \r\n                </div>\r\n                <div className=\"chart-container\">\r\n                    <Bar\r\n                        data={chartData}\r\n                        height={400}\r\n                        width={400}\r\n                        options={{\r\n                            maintainAspectRatio: false,\r\n                            responsive: true,\r\n                            scales: {\r\n                                yAxes: [\r\n                                    { \r\n                                        ticks: { beginAtZero: true } \r\n                                    }\r\n                                ]\r\n                            },\r\n                            legend: {\r\n                                display: false,\r\n                            }\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </main>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default PaisesPop;\r\n"," import React from 'react'\r\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\r\nimport Continentes from './pages/Continentes'\r\nimport Idiomas from './pages/Idiomas'\r\nimport PaisesPop from './pages/PaisesPop'\r\n\r\nfunction Routes(){\r\n    return(\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route path=\"/\" exact component={Continentes}/>\r\n                <Route path=\"/paisesPop\" component={PaisesPop}/>\r\n                <Route path=\"/idiomas\" component={Idiomas}/>\r\n            </Switch>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default Routes","import React from 'react';\nimport './Global.css';\nimport Routes from './routes'\n\nfunction App() {\n  return (\n    <Routes/>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}